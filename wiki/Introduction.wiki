#labels Phase-Implementation
= Usage Instructions =

I plan to write detailed instructions soon but this will have to suffice for now.

== Security Restrictions ==

The RestHttpService library uses sockets to overcome the limitations of Flex's HTTPService component. Unfortunately, the Flash security model restricts a Flex application from making socket connections to any server that does not explicitly permit such connections (excluding basic HTTP GET and POST requests). Therefore, in order to make a REST service available to a Flex socket client, the REST server must expose a socket policy file on port 843 named crossdomain.xml (unless the Security.loadPolicyFile() method is used to explicitly load a different file from another port). This policy file is accessed automatically by Flex before it attempts to open a socket. If the policy file is not available or does not grant access to the Flex application's domain, Flex will throw a "Security sandbox violation" error. Here is a very basic example of a crossdomain.xml file that allows access to all domains and ports:

{{{
<?xml version="1.0"?>
<!DOCTYPE cross-domain-policy SYSTEM "http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd">
<cross-domain-policy>
    <allow-access-from domain="*"/>
</cross-domain-policy>
}}}

This policy file grants access on port 8080 to all Flex clients originating from the company.com domain:

{{{
<?xml version="1.0"?>
<!DOCTYPE cross-domain-policy SYSTEM "http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd">
<cross-domain-policy>
    <allow-access-from domain="*.company.com" to-ports="8080" secure="false"/>
</cross-domain-policy>
}}}

For detailed information regarding the format of the crossdomain.xml file and how to use it, see this article:

[http://kb.adobe.com/selfservice/viewContent.do?externalId=tn_14213&sliceId=2]

NOTE: Prior to Flash 9.0.124, the policy file could be served by an HTTP server. Unfortunately, a socket server is now required. You can no longer grant access to Flex socket clients by just dropping a crossdomain.xml file in your web root. Since you can't use an HTTP server, a simple way to serve the policy file is to run a small daemon process on your REST server that does nothing more than listen for socket connections and serve the policy file from port 843. You can learn more about how to set up a policy file server here:

[http://www.adobe.com/devnet/flashplayer/articles/socket_policy_files.html]

A free script that implements a simple policy file server is available here:

[http://download.macromedia.com/pub/developer/flashpolicyd_v0.6.zip]

If you'd prefer to listen for policy file requests on a port other than the default 843 (perhaps a port above 1024 so you don't have to run the policy server as root), your Flex application will need to make this call at startup:

{{{
Security.loadPolicyFile("xmlsocket://" + restServerName + ":" + socketPolicyPort);
}}}

== Sample Code ==

To use the RestHttpService component, add it to your library path and invoke it from an MXML application. Here is some sample MXML to help get you started (you can download this sample MXML from the Downloads tab):

{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:rest="com.sourcestream.flex.http.*" applicationComplete="init()">

    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import com.sourcestream.flex.http.HttpEvent;
        import com.sourcestream.flex.http.RestHttpService;

        function init():void
        {
            /* this line is only necessary if the REST server is listening for policy file requests
               on a port other than the default 843 (in this case, port 1025) */
            Security.loadPolicyFile("xmlsocket://localhost:1025");
        }

        function doPost():void
        {
            postService.send("<body>body of post request</body>");
        }

        function doPut():void
        {
            putService.send("<body>body of put request</body>");
        }

        function dataHandler(event:HttpEvent):void
        {
            Alert.show(event.response.statusCode + " (" + event.response.statusMessage + ")\n\n" + event.data);
        }

        function faultHandler(event:HttpEvent):void
        {
            Alert.show(event.response.statusCode + " (" + event.response.statusMessage + ")\n\n" + event.text);
        }

        /**
         * This method demonstrates how to invoke the RestHttpService class from ActionScript.
         */
        function actionScriptExample():void
        {
            //instantiate RestHttpService using host name or IP and port (add third paramater with value "true" for SSL)
            var restService:RestHttpService = new RestHttpService("localhost", 8080);

            //add a listener to be invoked when data is received
            restService.addEventListener(RestHttpService.EVENT_DATA_RECEIVED, dataHandler);

            //add a listener to be invoked when an error occurs
            restService.addEventListener(RestHttpService.EVENT_FAULT, faultHandler);

            //use appropriate do<Action>() method to call the REST service (i.e., for GET requests, use doGet() method)
            restService.doPost("/books", "<body>body of post request</body>", "application/xml");
            restService.doGet("/books/1");
            restService.doPut("/books/1", "<body>body of put request</body>", "application/xml");
            restService.doDelete("/books/1");
        }

        ]]>
    </mx:Script>

    <!-- add secure="true" to connect to a secure service -->
    <rest:RestHttpService id="postService" host="localhost" port="8080" method="{RestHttpService.METHOD_POST}" path="/books" contentType="application/xml" result="dataHandler(event)" fault="faultHandler(event)"/>
    <rest:RestHttpService id="getService" host="localhost" port="8080" method="{RestHttpService.METHOD_GET}" path="/books" result="dataHandler(event)" fault="faultHandler(event)"/>
    <rest:RestHttpService id="putService" host="localhost" port="8080" method="{RestHttpService.METHOD_PUT}" path="/books/1" contentType="application/xml" result="dataHandler(event)" fault="faultHandler(event)"/>
    <rest:RestHttpService id="deleteService" host="localhost" port="8080" method="{RestHttpService.METHOD_DELETE}" path="/books/1" result="dataHandler(event)" fault="faultHandler(event)"/>

    <mx:Button click="getService.send()" label="Get"/>
    <mx:Button click="doPost()" label="Post"/>
    <mx:Button click="doPut()" label="Put"/>
    <mx:Button click="deleteService.send()" label="Delete"/>
</mx:Application>
}}}

== Limitations ==

This service is under development and, therefore, does not yet support all HTTP features. For example, only text payloads are currently supported. Requests and responses carrying binary data will be supported in a future version. In addition, the HTTPS/TLS/SSL support is in the early stages of development and still experimental.