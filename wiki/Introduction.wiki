#labels instructions
= Usage Instructions =

I plan to write detailed instructions soon but this will have to suffice for now.

== Security Restrictions ==

The Flash security model restricts a Flex application to making connections only to the server from which it was loaded. Therefore, you must either place your Flex application on the server that hosts the REST web service or you must include a special filed, named crossdomain.xml, in the root of your REST service. Here is a sample crossdomain.xml file that allows connections from a domain named "company.com".

{{{
<?xml version="1.0"?>
<!DOCTYPE cross-domain-policy SYSTEM "http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd">
<cross-domain-policy>
    <allow-access-from domain="*.company.com" />
</cross-domain-policy>
}}}

For detailed instructions about the format of the crossdomain.xml file, see this article:

[http://kb.adobe.com/selfservice/viewContent.do?externalId=tn_14213&sliceId=2]

== Sample Code ==

To use the RestHttpService component, add it to your library path and invoke it from an MXML application. Here is some sample MXML to help get you started (you can download this sample MXML from the Downloads tab):

{{{
<?xml version="1.0" encoding="utf-8"?>
<!--
 * The MIT License
 *
 * Copyright (c) 2008
 * Dustin R. Callaway
 * http://www.sourcestream.com/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:rest="com.sourcestream.flex.http.*">

    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import com.sourcestream.flex.http.HttpEvent;
        import com.sourcestream.flex.http.RestHttpService;

        function doPost():void
        {
            postService.send("<body>body of post request</body>");
        }

        function doPut():void
        {
            putService.send("<body>body of put request</body>");
        }

        function dataHandler(event:HttpEvent):void
        {
            Alert.show(event.response.statusCode + " (" + event.response.statusMessage + ")\n\n" + event.data);
        }

        function faultHandler(event:HttpEvent):void
        {
            Alert.show(event.response.statusCode + " (" + event.response.statusMessage + ")\n\n" + event.text);
        }

        /**
         * This method demonstrates how to invoke the RestHttpService class from ActionScript.
         */
        function actionScriptExample():void
        {
            //instantiate RestHttpService using host name or IP and port (change last parameter to true for SSL)
            var restService:RestHttpService = new RestHttpService("localhost", 8080, false);

            //add a listener to be invoked when data is received
            restService.addEventListener(RestHttpService.EVENT_DATA_RECEIVED, dataHandler);

            //add a listener to be invoked when an error occurs
            restService.addEventListener(RestHttpService.EVENT_FAULT, faultHandler);

            //use appropriate do<Action>() method to call the REST service (i.e., for GET requests, use doGet() method)
            restService.doPost("/books", "<body>body of post request</body>", "application/xml");
            restService.doGet("/books/1");
            restService.doPut("/books/1", "<body>body of put request</body>", "application/xml");
            restService.doDelete("/books/1");
        }

        ]]>
    </mx:Script>

    <!-- add secure="true" to connect to a secure service -->
    <rest:RestHttpService id="postService" host="localhost" port="8080" method="{RestHttpService.METHOD_POST}" path="/books" contentType="application/xml" result="dataHandler(event)" fault="faultHandler(event)"/>
    <rest:RestHttpService id="getService" host="localhost" port="8080" method="{RestHttpService.METHOD_GET}" path="/books" result="dataHandler(event)" fault="faultHandler(event)"/>
    <rest:RestHttpService id="putService" host="localhost" port="8080" method="{RestHttpService.METHOD_PUT}" path="/books/1" contentType="application/xml" result="dataHandler(event)" fault="faultHandler(event)"/>
    <rest:RestHttpService id="deleteService" host="localhost" port="8080" method="{RestHttpService.METHOD_DELETE}" path="/books/1" result="dataHandler(event)" fault="faultHandler(event)"/>

    <mx:Button click="getService.send()" label="Get"/>
    <mx:Button click="doPost()" label="Post"/>
    <mx:Button click="doPut()" label="Put"/>
    <mx:Button click="deleteService.send()" label="Delete"/>
</mx:Application>
}}}